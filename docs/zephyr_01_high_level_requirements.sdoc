[DOCUMENT]
TITLE: Zephyr Requirements
OPTIONS:
  MARKUP: Text

[GRAMMAR]
ELEMENTS:
- TAG: REQUIREMENT
  FIELDS:
  - TITLE: UID
    TYPE: String
    REQUIRED: False
  - TITLE: TYPE
    TYPE: String
    REQUIRED: False
  - TITLE: COMPONENT
    TYPE: String
    REQUIRED: False
  - TITLE: REFS
    TYPE: Reference(ParentReqReference)
    REQUIRED: False
  - TITLE: TITLE
    TYPE: String
    REQUIRED: False
  - TITLE: STATEMENT
    TYPE: String
    REQUIRED: False
  - TITLE: USER_STORY
    TYPE: String
    REQUIRED: False
  - TITLE: DISCUSSION_DATE
    TYPE: String
    REQUIRED: False
  - TITLE: REVIEW_COMMENT
    TYPE: String
    REQUIRED: False

[REQUIREMENT]
UID: ZEP-ARCH-001
TYPE: High Level
COMPONENT: Hardware Architecture Interface (KS: Should this be Abstraction rather than Architecture?)
TITLE: Architecture Layer Interface
STATEMENT: >>>
Zephyr shall provide a framework for applications running on Zephyr to communicate with the hardware architectural service available from Zephyr for the system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to easily switch my application to a different MCU architecture (x86, ARM Cortex-M/A, RISCV etc.)
<<<
DISCUSSION_DATE: >>>
2022/3/30 - ok - pf
<<<

[REQUIREMENT]
UID: ZEP-ARCH-006
TYPE: High Level
COMPONENT: Hardware Architecture Interface
REFS:
- TYPE: Parent
  VALUE: ZEP-ARCH-001
TITLE: Support multiprocessor management
STATEMENT: >>>
Zephyr shall support multiprocessing management facilities.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to use Zephyr OS on multi core (SMP-)MCUs/MPUs
<<<
DISCUSSION_DATE: >>>
Still need to articulate the capabilities explicitly.
<<<
REVIEW_COMMENT: >>>
From the Docs: No special application code needs to be written to take advantage of this feature
<<<

[REQUIREMENT]
UID: ZEP-CLIB-001
TYPE: High Level
COMPONENT: C Library
TITLE: C Library Support
STATEMENT: >>>
Zephyr shall support a hooks to interface to a subset of the standard C library.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to have a selection of standard C library implementations e.g. a full extend and a minimal with a smaller footprint or a particular fast executing implementation.
<<<
DISCUSSION_DATE: >>>
We needed to do a subset description, and need to be specific about the subset.
<<<
REVIEW_COMMENT: >>>
Can we limit the type of C library implementations? Testing might be hell if we do not limit ourselfes to the ones defined? Like "miminal libc" and "newlib". Will it make sense to pull miminal Libc into the certification scope?

Clarification: Would prefer to cover the scope part first. Talking about the hooks which apply to each C Library. Open, Close, Diff. Hooks that are OS dependent. C or Library dependent. ref https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/newlib/libc-hooks.c
<<<

[REQUIREMENT]
UID: ZEP-CLIB-002
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support formatted output
<<<
USER_STORY: >>>
(targets for *printf having variable argument list)
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-003
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support floating point math libraries for processors where floating point is available.
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/math.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-004
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support boolean primitives
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/stdbool.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-005
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support the standard unix time interface
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/time.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-006
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support an interface to manage strings
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/strings.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-007
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support an interface to move contents between regions of memory
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/string.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-008
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support a file i/O based interface for driver communication.
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/stdint.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-009
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support standard C99 integer types
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/stdint.h https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/limits.h
<<<
DISCUSSION_DATE: >>>
20221122.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-010
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
Zephyr shall support standard system error numbers as defined by IEEE Std 1003.1-2017
<<<
USER_STORY: >>>
https://github.com/zephyrproject-rtos/zephyr/blob/main/lib/libc/minimal/include/errno.h
<<<
DISCUSSION_DATE: >>>
20221129.0
<<<

[REQUIREMENT]
UID: ZEP-CLIB-011
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
The set of C Libraries supported by Zephyr needs to be defined documented in the Zephyr Safety Manual
<<<
USER_STORY: >>>
As a Zephyr OS user implementing a safety application I want to have documented which C library functions are supported.
<<<
DISCUSSION_DATE: >>>
revisit after subset defined
<<<

[REQUIREMENT]
UID: ZEP-CLIB-012
TYPE: Functional
COMPONENT: C Library
REFS:
- TYPE: Parent
  VALUE: ZEP-CLIB-001
STATEMENT: >>>
The Zephyr Safety Manual needs to specify how to configure the support of external C Libraries
<<<
USER_STORY: >>>
As a Zephyr OS user implementing a safety application I want to have documented how I am allowed to configure (KConfig) Zephyr OS.
<<<
DISCUSSION_DATE: >>>
revisit after subset defined
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Utilities Library - Data Structures
TITLE: Data Structures Library Utilities
STATEMENT: >>>
Zephyr shall provide common container data structures as library utilities   (ring buffer, linked list, red black trees, ....   see document from Anas)
<<<
USER_STORY: >>>
As a Zepyhr OS developler (user) I do not want to implement common software patterns multiple time in each module again, but make use of a common library which provides it.
<<<
DISCUSSION_DATE: >>>
AI: Need to be reworked;  split into several requirements;   Library utility shall provide red-black,   shall provide ...   .   Call "Utility Libraries"
<<<
REVIEW_COMMENT: >>>
Possible API - It's ambiguous what is meant by common container data structures as library ulitileis.... - get pointer to code.   (Single linked list, double linked list, ....)

Clarification: There are many files. Linked list, ring buffer, ...). This is an implementation. Need to look at scope. Doesn't need to be a high level requirement
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Device Driver API
TITLE: Device Driver Abstracting
STATEMENT: >>>
Zephyr shall provide a framework for managing device driver behavior (note: device drivers includes peripherals)
<<<
USER_STORY: >>>
As a Zephyr OS user I want my application to be portable between different MCU architectures (ARM Cortex-M/A, Intel x86, RISCV etc.) and MCU vendors (STM, NXP, Intel, etc.) without having to change the MCU peripherals access.
<<<
DISCUSSION_DATE: >>>
2022/3/30 - ok - pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: Device Driver API
TITLE: Device Driver Abstraction
STATEMENT: >>>
Zephyr shall provide abstraction of device drivers with common functionalities as an intermediate interface between applications and device drivers, where such interface is implemented by individual device drivers.

Proposal for replacement: Zephyr shall provide an interface between application and individual device drivers to provide an abstraction of device drivers with common functionalities.
<<<
USER_STORY: >>>
=N21 & "

Remark: What is the difference to ZEP006?"
<<<
DISCUSSION_DATE: >>>
Needs clarification - what are common functionalities?   Link to description?
<<<
REVIEW_COMMENT: >>>
What are common functionalities?

Clarification: Abstract API drivers, UART. Set of files asociated with that. Include drivers. 50+ files. Best place to look at is the documentation (not the files).
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: Device Driver API
TITLE: Expose kernel to hardware interrupts
STATEMENT: >>>
Zephyr shall provide an interface for managing a defined set of hardware exceptions (including interupts) across all systems.
<<<
USER_STORY: >>>
As a Zephyr OS user I want hardware exeptions (hardware failures, programming mistakes) to be handled gracefully (no program crashes as far as possible).
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<
REVIEW_COMMENT: >>>
What does "system" mean in this context? Architecture?

NP: Now I think system means HW platform.
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Exception Handling
TITLE: Fatal Exception handling
STATEMENT: >>>
The Zephyr kernel shall provide a framework for error and exception handling.
<<<
USER_STORY: >>>
As a Zephyr OS user I want errors and exeptions to handled and react according to my applications requirements (e.g. reach/establish the applications safey state).
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: Fatal Exception Handling
TITLE: Fatal Exception Error Handler
STATEMENT: >>>
Zephyr shall provide default handlers for exceptions that do not have a dedicated handler
<<<
USER_STORY: >>>
As a Zephyr OS user I want execptions which I did not handle explicitely (by mistake or on purpose) to be caught by a default handler, defined either by Zephyr OS or by myself.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pq - need definition of exceptions vs fatal errors
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: Fatal Error Handling
STATEMENT: >>>
Zephyr shall provide default handlers for fatal errors that do not have a dedicated handler
<<<
USER_STORY: >>>
=N25
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pq
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: Fatal Error Handling
STATEMENT: >>>
Zephyr shall provide an interface to assign a specific handler with an exception.
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: Fatal Error Handling
STATEMENT: >>>
Zephyr shall provide an interface to assign a specific handler for a fatal error.
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: File Systems
TITLE: Common File system operation support
STATEMENT: >>>
Zephyr shall provide a framework for managing file system access
<<<
USER_STORY: >>>
As a Zephyr OS user I want a posix / c like file system access to store data.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - p? - depends on set of expectations
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide write access to the files in the file system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to write to a file either from the beginning of the file or appending at the end.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide file close capabilities for files on the file system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to close a file after being finished with my file operations, unlocking any access restrictions.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide file open capabilities for files on the file system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to open a file for writing or reading.
When opened for writing, I want to have exclusive access to the file.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide file create capabilities for files on the file system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to create a new file or overwrite an existing file at the same filesystem location / identifier (e.g. path + name)
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide the capability to move files on the file system
<<<
DISCUSSION_DATE: >>>
- DIscuss implications of file operations and safety (how demonstrate that the system remains safe)
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide file delete capabilities for files on the file system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to delete an existing file.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pf
<<<

[REQUIREMENT]
TYPE: Functional
COMPONENT: File System
STATEMENT: >>>
Zephyr shall provide read access to files in the file system
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to read from an existing file, also while the file is read from multiple and write accessed from one other instances.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok -pf
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Interrupts
TITLE: Interrupt Service Routine
STATEMENT: >>>
Zephyr shall provide a framework for interrupt management
<<<
USER_STORY: >>>
As a Zephyr OS user I want interrupts to be handled sychronously in response to a hardware or software interrupt request with a minimum latency, preemtping threads and, as far as the hardware allows, lower priority interrupt service routines.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Logging
TITLE: Logging
STATEMENT: >>>
Zephyr shall provide a framework for logging events
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to log application defined events as well as framework exceptions.
<<<
DISCUSSION_DATE: >>>
2022/4/13 - ok - pf
<<<
REVIEW_COMMENT: >>>
Nicole:  we need to have logging in the safety scope?
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Memory Management
STATEMENT: >>>
Zephyr shall support a memory management framework
<<<
USER_STORY: >>>
As a Zephyr OS user I want memory to be allocated and protected to my application threads preventing mistakenly access to foreign memory as far as the hardware allows.
<<<
DISCUSSION_DATE: >>>
2022/10/25 - ok
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Power Management
TITLE: Power Management
STATEMENT: >>>
Zephyr shall provide an interface to control framework to provide support control over hardware power states
<<<
USER_STORY: >>>
As a Zephyr OS user I want to be able to control the power mode of the MCU and its peripherals to take advantage of the hardward features and to be able to implement low power or battery driven long life applications.
<<<
DISCUSSION_DATE: >>>
2022/5/25 - ok pf-ok
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Thread Communication
TITLE: Mutex
STATEMENT: >>>
Zephyr shall provide an interface framework for managing communcation between threads.
<<<
USER_STORY: >>>
As a Zephyr OS user I want to able to exchange information between threads in a thread-safe manner guaranteeing data consistence.
<<<
DISCUSSION_DATE: >>>
2022/5/25 - ok  - pf-ok
<<<

[REQUIREMENT]
TYPE: High Level
COMPONENT: Thread Mapping (should it just be scheduling)
TITLE: Multiple CPU scheduling
STATEMENT: >>>
Zephyr shall support scheduling of OS threads on multiple hardware CPUs
<<<
USER_STORY: >>>
As a Zephyr OS user I want Zephyr OS to run on MCUs/CPUs with one or more CPU cores.
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<

[REQUIREMENT]
UID: ZEP-SCHED-001
TYPE: High Level
COMPONENT: Thread Scheduling
TITLE: Scheduling
STATEMENT: >>>
Zephyr shall provide a mechanism for selecting which of many threads will be run on a given CPU   Zephyr shall provide an interface to assign a thread to a specific CPU.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to control which thread will run on which CPU
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<
REVIEW_COMMENT: >>>
Zephyr shall allow scheduling of threads
<<<

[REQUIREMENT]
UID: ZEP-THREAD-001
TYPE: High Level
COMPONENT: Threads
TITLE: Managing threads
STATEMENT: >>>
Zephyr shall provide a framework facilities for managing multiple threads of execution.
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to manage the execute of multiple threads with different priorities
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<
REVIEW_COMMENT: >>>
Nothing about priorities...
<<<

[REQUIREMENT]
UID: ZEP-TIME-001
TYPE: High Level
COMPONENT: Timers
TITLE: Timers
STATEMENT: >>>
Zephyr shall provide a framework abstraction for managing time-based events
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to start, suspend, resume and stop timers which shall trigger an event on a set expiration time
<<<
DISCUSSION_DATE: >>>
pf-ok
<<<
REVIEW_COMMENT: >>>
Do we need requirements on scheduling latency?
<<<

[REQUIREMENT]
UID: ZEP-TRACE-001
TYPE: High Level
COMPONENT: Tracing
TITLE: Tracing
STATEMENT: >>>
Zepyhr shall provide a framework mechanism for tracing low level system operations  (NOTE: system calls, interrupts, kernel calls, thread, synchronization, etc.)
<<<
USER_STORY: >>>
As a Zephyr OS user, I want to be able to trace different OS operations
<<<
DISCUSSION_DATE: >>>
Moved
<<<
REVIEW_COMMENT: >>>
What are low level system operations in this context?
<<<
