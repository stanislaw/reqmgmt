[DOCUMENT]
TITLE: Zephyr Software Requirements
REQ_PREFIX: ZEP-

[GRAMMAR]
IMPORT_FROM_FILE: software_requirements.sgra

[DOCUMENT_FROM_FILE]
FILE: hw_arch_interface.sdoc

[DOCUMENT_FROM_FILE]
FILE: c_library.sdoc

[DOCUMENT_FROM_FILE]
FILE: device_driver_api.sdoc

[SECTION]
TITLE: Exception and Error Handling

[REQUIREMENT]
UID: ZEP-47
STATUS: Draft
TYPE: Functional
COMPONENT: Exception and Error Handling
TITLE: Fatal Exception Error Handler
STATEMENT: >>>
The Zephyr RTOS shall provide default handlers for exceptions.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want exceptions which I did not handle explicitly (by mistake or on purpose) to be caught by a default handler, defined either by Zephyr OS or by myself.
<<<

[REQUIREMENT]
UID: ZEP-48
STATUS: Draft
TYPE: Functional
COMPONENT: Exception and Error Handling
TITLE: Default handler for fatal errors
STATEMENT: >>>
The Zephyr RTOS shall provide default handlers for fatal errors that do not have a dedicated handler.
<<<

[REQUIREMENT]
UID: ZEP-49
STATUS: Draft
TYPE: Functional
COMPONENT: Exception and Error Handling
TITLE: Assigning a specific handler
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to assign a specific handler with an exception.
<<<

[REQUIREMENT]
UID: ZEP-50
STATUS: Draft
TYPE: Functional
COMPONENT: Exception and Error Handling
TITLE: Assigning a specific handler (2)
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to assign a specific handler for a fatal error.
<<<

[/SECTION]

[DOCUMENT_FROM_FILE]
FILE: file_system.sdoc

[DOCUMENT_FROM_FILE]
FILE: interrupts.sdoc

[DOCUMENT_FROM_FILE]
FILE: logging.sdoc

[DOCUMENT_FROM_FILE]
FILE: memory_protection.sdoc

[SECTION]
TITLE: Memory Objects

[REQUIREMENT]
UID: ZEP-87
STATUS: Draft
TYPE: Functional
COMPONENT: Memory Objects
TITLE: Dynamic Memory Allocation
STATEMENT: >>>
The Zephyr RTOS shall allow threads to dynamically allocate variable-sized memory regions from a specified range of memory.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want my application to be able to dynamically allocate memory of a application defined size.
<<<
REVIEW_COMMENT: >>>
Is dynamic memory allocation only allowed in memory pool objects?
<<<

[REQUIREMENT]
UID: ZEP-88
STATUS: Draft
TYPE: Functional
COMPONENT: Memory Objects
TITLE: Memory Slab Object
STATEMENT: >>>
The Zephyr RTOS shall allow threads to dynamically allocate fixed-sized memory regions from a specified range of memory.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want a most efficient and least fragmentation prone dynamic memory allocation mechanism.
<<<

[/SECTION]

[SECTION]
TITLE: Data Passing

[REQUIREMENT]
UID: ZEP-89
STATUS: Draft
TYPE: Functional
COMPONENT: Data Passing
TITLE: Traditional FIFO Queue
STATEMENT: >>>
The Zephyr RTOS shall provide a kernel object that implements a traditional first in, first out (FIFO) queue, allowing threads and ISRs to add and remove a limited number of 32-bit data values.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want to be able to exchange 1 to N data objects between different threads and ISR in a thread-safe manner with a first-in-first-out (queue) behaviour.
<<<

[REQUIREMENT]
UID: ZEP-90
STATUS: Draft
TYPE: Functional
COMPONENT: Data Passing
TITLE: Traditional LIFO queue
STATEMENT: >>>
The Zephyr RTOS shall provide a kernel object that implements a traditional last in, first out (LIFO) queue, allowing threads and ISRs to add and remove a limited number of 32-bit data values.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want to be able to exchange 1 to N data objects between different threads and ISR in a thread-safe manner with a last-in-first-out (stack) behaviour.
<<<

[/SECTION]

[SECTION]
TITLE: Mutex

[REQUIREMENT]
UID: ZEP-91
STATUS: Draft
TYPE: Functional
COMPONENT: Mutex
TITLE: Mutex Kernel Object
STATEMENT: >>>
The Zephyr RTOS shall support resource synchronization. (Note synchronization can be for memory access, and mutex may be one implementation, but not the only one).
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want to be able to sychonize threads when accessing common resources, where the thread shall have the option to:
- wait eternally until the resources becomes available.
- immediately return with a negative message if the resource is not available and allow the thread to continue.
- wait for a given time for the resource to become available or return with a negative message.
<<<
REVIEW_COMMENT: >>>
Concern over phrase recursive.  What is it MUTEXing? Memory Management?
<<<

[/SECTION]

[DOCUMENT_FROM_FILE]
FILE: power_management.sdoc

[SECTION]
TITLE: Thread Communication

[REQUIREMENT]
UID: ZEP-96
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Communication
TITLE: Exchanging data between threads
STATEMENT: >>>
The Zephyr RTOS shall provide a mechanism for exchanging data between threads.
<<<
USER_STORY: >>>
(Note: copying data may be needed here - what is Zephyr doing? is it configurable?)
<<<

[REQUIREMENT]
UID: ZEP-97
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Communication
TITLE: Waiting for results during communication
STATEMENT: >>>
The Zephyr RTOS shall provide mechanisms to enable waiting for results during communication between threads. (NOTE:  waiting for results is really bad and dangerous, want to avoid if at all possible).
<<<
USER_STORY: >>>
=N73
<<<

[REQUIREMENT]
UID: ZEP-100
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Communication
TITLE: Poll Operation Support
STATEMENT: >>>
The Zephyr RTOS shall support a poll operation which enables waiting concurrently for any one of multiple conditions to be fulfilled.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want my thread to wait for one of several defined events to occur and only continue when one of them has occurred.
<<<

[REQUIREMENT]
UID: ZEP-101
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Communication
TITLE: Pipe Communication Primitive
STATEMENT: >>>
The Zephyr RTOS shall provide a communication primitive that allows a thread to transfer a block of
data to another thread.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want to send a byte stream from one thread to another in a thread-safe manner.
<<<

[REQUIREMENT]
UID: ZEP-102
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Communication
TITLE: Message Queue
STATEMENT: >>>
The Zephyr RTOS shall provide a a communication primitive that allow threads and ISRs to asynchronously exchange fixed-size data items.
<<<

[REQUIREMENT]
UID: ZEP-103
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Communication
TITLE: Mailbox Kernel Primitive
STATEMENT: >>>
The Zephyr RTOS shall provide a communication primitive that allows threads to exchange messages of varying sizes asynchronously or synchronously.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want a sending thread to deposit a message into the mailbox,
and a receiving thread to be able to retrieve the message at its convenience. This
allows for asynchronous communication, where threads do not need to synchronize their
execution explicitly.
<<<

[/SECTION]

[SECTION]
TITLE: Thread Scheduling

[REQUIREMENT]
UID: ZEP-104
STATUS: Draft
TYPE: Functional
COMPONENT: Multi Core
TITLE: Support operation on more than one CPU
STATEMENT: >>>
The Zephyr RTOS shall support operation on more than one physical CPU sharing the same kernel state.
<<<

[REQUIREMENT]
UID: ZEP-105
STATUS: Draft
TYPE: Functional
COMPONENT: Multi Core
TITLE: Running threads on specific CPUs
STATEMENT: >>>
The Zephyr RTOS shall provide an interface for running threads on specific sets of CPUs ( default is 1 CPU).
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want Zephyr OS to be able to specify the CPU core or the set of CPU cores on which a thread shall be executed.
<<<

[REQUIREMENT]
UID: ZEP-106
STATUS: Draft
TYPE: Functional
COMPONENT: Multi Core
TITLE: Exclusion between physical CPUs
STATEMENT: >>>
The Zephyr RTOS shall provide an interface for mutual exclusion between multiple physical CPUs.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want Zephyr OS to provide synchronization mechanisms between the CPU cores and the access to common resources.
<<<

[/SECTION]

[SECTION]
TITLE: Thread Scheduling

[REQUIREMENT]
UID: ZEP-112
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Scheduling a thread based on an event
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to schedule a thread based on an event.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to execute work which reacts on events and interrupts the current executed work.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123

[REQUIREMENT]
UID: ZEP-114
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Deadline Scheduling Priorities
STATEMENT: >>>
The Zephyr RTOS shall organize running threads by earliest deadline first priority.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to schedule threads by earliest deadline first.
<<<

[REQUIREMENT]
UID: ZEP-115
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Work Queue utility capable of running preemptible work items
STATEMENT: >>>
The Zephyr RTOS shall provide a thread-pooled work queue utility capable of running preemptible work items with specific scheduler priorities.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to add work items in a thread work queue with different priorities and these shall be scheduled according their priorities.
<<<

[REQUIREMENT]
UID: ZEP-24
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Run user supplied functions in-order in a separate thread(s)
STATEMENT: >>>
The Zephyr RTOS shall provide an interface for running user-supplied functions.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to run functions in-order in a separated thread/threads.
<<<
REVIEW_COMMENT: >>>
Where do we put this,  thread, scheduling or???
<<<

[REQUIREMENT]
UID: ZEP-116
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Organize running threads into a fixed list
STATEMENT: >>>
The Zephyr RTOS shall organize running threads into a fixed list of numeric priorities.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want that the OS organize running threads in a fixed list of numeric priorities.
<<<
REVIEW_COMMENT: >>>
The Zephyr RTOS shall allow prioritizing threads
<<<

[REQUIREMENT]
UID: ZEP-117
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Preemption support
STATEMENT: >>>
The Zephyr RTOS shall support preemption of a running thread by a higher priority thread.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want that the OS preempt running threads by a thread with higher priority.
<<<

[REQUIREMENT]
UID: ZEP-118
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Un-preemptible thread priorities
STATEMENT: >>>
The Zephyr RTOS shall support thread priorities which cannot be preempted by other user threads.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to configure thread prioritizes which cannot be preempted by other user threads.
<<<

[REQUIREMENT]
UID: ZEP-119
STATUS: Draft
TYPE: Functional
COMPONENT: Thread Scheduling
TITLE: Time sharing of CPU resources
STATEMENT: >>>
The Zephyr RTOS shall support time sharing of CPU resources among threads of the same priority.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to configure my RTOS in the way, that the CPU resources are shared evenly among executed threads of the same priority.
<<<
REVIEW_COMMENT: >>>
what does traditional mean here?   Round robin?
<<<

[/SECTION]

[SECTION]
TITLE: Threads

[REQUIREMENT]
UID: ZEP-23
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Creating threads
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to create (start) a thread.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-107
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Setting thread priority
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to set a thread's priority.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-122

[REQUIREMENT]
UID: ZEP-108
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Suspending a thread
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to suspend a thread.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-109
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Resuming a suspended thread
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to resume a suspended thread.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-110
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Resuming a suspended thread after a timeout
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to resume a suspended thread after a timeout.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-111
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Deleting a thread
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to delete (end) a thread.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-124
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Thread states
STATEMENT: >>>
Threads shall have different states to fulfill the Life-cycle of a thread
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to know in what state a specific thread is.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-98
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Thread stack objects
STATEMENT: >>>
Every Thread shall have it's own stack.
<<<
USER_STORY: >>>
As a Zephyr RTOS user I want to be able to configure the stack size of a thread. And every thread shall have it's own dedicated stack.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-25
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Thread privileges
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to create threads with defined privilege.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-26
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Scheduling multiple threads
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to schedule multiple threads.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-125
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Thread Options
STATEMENT: >>>
The Zephyr RTOS shall support a set of thread options.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to pass specific option to a thread.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[REQUIREMENT]
UID: ZEP-126
STATUS: Draft
TYPE: Functional
COMPONENT: Threads
TITLE: Thread Custom Data
STATEMENT: >>>
Every thread shall have a custom data area.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to set a thread specific custom area for every thread I create and which can be used only by the thread itself or the can be used by the application
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-123
- TYPE: Parent
  VALUE: ZEP-5

[/SECTION]

[SECTION]
TITLE: Timers

[REQUIREMENT]
UID: ZEP-27
STATUS: Draft
TYPE: Functional
COMPONENT: Timers
TITLE: Kernel Clock
STATEMENT: >>>
The Zephyr RTOS shall provide a interface for checking the current value of the real-time clock.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to track the passed real time in the OS with a dedicated hardware counter and interrupt.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-6

[REQUIREMENT]
UID: ZEP-28
STATUS: Draft
TYPE: Functional
COMPONENT: Timers
TITLE: Call functions in interrupt context
STATEMENT: >>>
The Zephyr RTOS shall provide an interface to schedule user mode call back function triggered by a real time clock value.
<<<
USER_STORY: >>>
As a Zephyr RTOS user, I want to be able to execute functions in the interrupt context and the interrupt context shall be base on a real-time counter.
<<<
RELATIONS:
- TYPE: Parent
  VALUE: ZEP-6

[/SECTION]

[DOCUMENT_FROM_FILE]
FILE: tracing.sdoc

[DOCUMENT_FROM_FILE]
FILE: semaphore.sdoc
